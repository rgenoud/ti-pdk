#!/bin/bash

##################################################################
# File: gen_keywr_cert.sh
# 
# Description: Script to generate x509 certificate for key wirter, 
#              which has encrypted customer key information.
# 
# (c) Texas Instruments 2020, All rights reserved.
##################################################################

HELPTXT="
	./gen_keywr_cert.sh - creates a x509 certificate from the keys input to this script.

	-a
	--aes256
		256 bit (symmetric key)
		AES-256 key to be used (supposed to be randomly generated by customer)
		If not specified, a random 256 bit key is chosen by the script

	-b
	--bmpk
		4096 bit (RSA private key, pem format)
		BMPK key to be used (not necessary, in case customer doesn't want to program
		BMPK, BMEK keys)

	--bmek
		256 bit (symmetric key)
		BMEK key to be used (not necessary, in case customer doesn't want to program
		BMPK, BMEK keys)

	-c
	--cert
		Path to save final certificate
		Default is '../x509cert/final_certificate.cert'

	-g
	--gen
		Generate aes256 key, bmpk, bmek, smpk, smek in keys/ folder

	-h
		Help text

	-s
	--smpk
		* Necessary
		4096 bit (RSA private key, pem format)
		SMPK key to be used

	--smek
		* Necessary
		256 bit (symmetric key)
		SMEK key to be used

	-t
	--tifek
		* Necessary
		4096 bit (RSA publick key, pem format)
		TI provided Forward Encryption Key

	Example Usage:
	./gen_keywr_cert.sh -s keys/smpk.pem --smek keys/smek.key -b keys/bmpk.pem --bmek keys/bmek.key -t keys/tifekpub.pem -a keys/aes256.key
"

## HELP ------------------------------------------------------------
if [ "$#" -lt 1 ]; then
	echo "$HELPTXT"
	exit
fi

AESFILE=""
BMPKCNFGFILE="configs/bmpk_config.txt"
SMPKCNFGFILE="configs/smpk_config.txt"
CERTFILE="../x509cert/final_certificate.bin"
CERTFILEBMPK="bmpk_sign_cert.bin"
CERTFILESMPK="smpk_sign_cert.bin"
CSVFILE="verify_hash.csv"
dual_cert_check=0

## PARSE ARGUMENTS -------------------------------------------------
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -a|--aes256)
    AESFILE="$2"
    shift # past argument
    shift # past value
    ;;
	-t|--tifek)
    TIFEKFILE="$2"
    shift # past argument
    shift # past value
    ;;
	-s|--smpk)
    SMPKFILE="$2"
    shift # past argument
    shift # past value
    ;;
	--smek)
    SMEKFILE="$2"
    shift # past argument
    shift # past value
    ;;
	-b|--bmpk)
    BMPKFILE="$2"
	dual_cert_check=$((dual_cert_check + 1))
    shift # past argument
    shift # past value
    ;;
	--bmek)
    BMEKFILE="$2"
	dual_cert_check=$((dual_cert_check + 1))
    shift # past argument
    shift # past value
    ;;
	-c|--cert)
	CERTFILE="$2"
	shift
	shift
	;;
	-h|--help)
	echo "$HELPTXT"
	exit
    shift # past argument
    shift # past value
    ;;
	-g|--gen)
	echo "# Generating dummy keys in keys/ folder"
	mkdir -p keys
	openssl rand 32 > keys/aes256.key
	openssl genrsa -out keys/smpk.pem 4096
	openssl genrsa -out keys/bmpk.pem 4096
	openssl rand 32 > keys/smek.key
	openssl rand 32 > keys/bmek.key
	exit
	shift # past argument
	shift # past value
	;;
esac
done

if [ "$dual_cert_check" -eq 1 ]; then
	echo "ERROR: Missing BMEK/BMPK"
	exit
fi

mkdir -p tmpdir
mkdir -p configs
mkdir -p ../x509cert


# generate a random 256 bit key -- AES256 Key
if [ "${AESFILE}" == "" ]; then
	echo "# aes256 key generated, since not provided"
	openssl rand 32 > tmpdir/aes256.key
	AESFILE="tmpdir/aes256.key"
fi


echo "# encrypt aes256 key with tifek public part"
cp "${TIFEKFILE}" tmpdir/tifekpub.pem
openssl rsautl -encrypt -inkey tmpdir/tifekpub.pem -pubin -in "${AESFILE}" \
		-out tmpdir/enc_aes_key.enc

echo "# encrypt SMPK-priv signed aes256 key(hash) with tifek public part"
openssl dgst -sha512 -sign "${SMPKFILE}" \
		-out tmpdir/smpk_sign_aes256.sign "${AESFILE}"
openssl rsautl -encrypt -raw -inkey tmpdir/tifekpub.pem \
		-pubin -in tmpdir/smpk_sign_aes256.sign \
		-out tmpdir/enc_smpk_signed_aes_key.enc

if [ "$dual_cert_check" -eq 2 ]; then
	echo "# encrypt BMPK-priv signed aes256 key(hash) with tifek public part"
	openssl dgst -sha512 -sign "${BMPKFILE}" \
			-out tmpdir/bmpk_sign_aes256.sign "${AESFILE}"
	openssl rsautl -encrypt -raw -inkey tmpdir/tifekpub.pem \
			-pubin -in tmpdir/bmpk_sign_aes256.sign \
			-out tmpdir/enc_bmpk_signed_aes_key.enc
fi



AES256VAL=$(xxd -p -c 32 "${AESFILE}")
echo "" > "${CSVFILE}"

echo "# encrypt smpk-pub hash using aes256 key"
openssl rsa -in "${SMPKFILE}" -outform der -pubout -out tmpdir/smpkpub.der
openssl dgst -sha512 -binary tmpdir/smpkpub.der > tmpdir/smpkh
echo "SMPKH,$(xxd -p tmpdir/smpkh)" >> "${CSVFILE}"
openssl rand -out tmpdir/smpkh.iv 16
openssl rand -out tmpdir/smpkh.rs 32
IV=$(xxd -p -c 32 tmpdir/smpkh.iv)
cat tmpdir/smpkh tmpdir/smpkh.rs > tmpdir/smpkhfield
openssl aes-256-cbc -e -K "${AES256VAL}" -iv "${IV}" -nopad -in tmpdir/smpkhfield \
		-out tmpdir/aesenc_smpkh.enc

if [ "$dual_cert_check" -eq 2 ]; then
	echo "# encrypt bmpk-pub hash using aes256 key"
	openssl rsa -in "${BMPKFILE}" -outform der -pubout -out tmpdir/bmpkpub.der
	openssl dgst -sha512 -binary tmpdir/bmpkpub.der > tmpdir/bmpkh
	echo "BMPKH,$(xxd -p tmpdir/bmpkh)" >> "${CSVFILE}"
	openssl rand -out tmpdir/bmpkh.iv 16
	openssl rand -out tmpdir/bmpkh.rs 32
	IV=$(xxd -p -c 32 tmpdir/bmpkh.iv)
	cat tmpdir/bmpkh tmpdir/bmpkh.rs > tmpdir/bmpkhfield
	openssl aes-256-cbc -e -K "${AES256VAL}" -iv "${IV}" -nopad -in tmpdir/bmpkhfield \
			-out tmpdir/aesenc_bmpkh.enc
fi

echo "# encrypt smek (sym key) using aes256 key"
openssl rand -out tmpdir/smek.iv 16
openssl rand -out tmpdir/smek.rs 32
IV=$(xxd -p -c 32 tmpdir/smek.iv)
size=$(du -b "${SMEKFILE}" | cut -f1)
if [ "$size" -ne "32" ]; then
	echo "# smek file is hex encoded, converting to binary"
	xxd -r -p "${SMEKFILE}" > tmpdir/smek.bin
else
	cp "${SMEKFILE}" tmpdir/smek.bin
fi
cat tmpdir/smek.bin tmpdir/smek.rs > tmpdir/smekfield
openssl dgst -sha512 -binary tmpdir/smek.bin > tmpdir/smekh
echo "SMEKH,$(xxd -p tmpdir/smekh)" >> "${CSVFILE}"
openssl aes-256-cbc -e -K "${AES256VAL}" -iv "${IV}" -nopad -in tmpdir/smekfield -out tmpdir/aesenc_smek.enc

if [ "$dual_cert_check" -eq 2 ]; then
	echo "# encrypt bmek (sym key) using aes256 key"
	openssl rand -out tmpdir/bmek.iv 16
	openssl rand -out tmpdir/bmek.rs 32
	IV=$(xxd -p -c 32 tmpdir/bmek.iv)
	size=$(du -b "${BMEKFILE}" | cut -f1)
	if [ "$size" -ne "32" ]; then
		echo "# bmek file is hex encoded, converting to binary"
		xxd -r -p "${BMEKFILE}" > tmpdir/bmek.bin
	else
		cp "${BMEKFILE}" tmpdir/bmek.bin
	fi
	cat tmpdir/bmek.bin tmpdir/bmek.rs > tmpdir/bmekfield
	openssl dgst -sha512 -binary tmpdir/bmek.bin > tmpdir/bmekh
	echo "BMEKH,$(xxd -p tmpdir/bmekh)" >> "${CSVFILE}"
	openssl aes-256-cbc -e -K "${AES256VAL}" -iv "${IV}" -nopad -in tmpdir/bmekfield -out tmpdir/aesenc_bmek.enc
fi

ENC_AES_KEY=$(xxd -p -c 1000000 tmpdir/enc_aes_key.enc)
sed "s/PUT_ENC_AES_KEY/${ENC_AES_KEY}/" templates/config_template.txt > "${SMPKCNFGFILE}" 
sed "s/PUT_SIZE_ENC_AES/$((${#ENC_AES_KEY}/2))/" -i "${SMPKCNFGFILE}"

ENC_SMPK_SIGNED_AES_KEY=$(xxd -p -c 1000000 tmpdir/enc_smpk_signed_aes_key.enc)
sed -i "s/PUT_ENC_SMPK_SIGNED_AES_KEY/${ENC_SMPK_SIGNED_AES_KEY}/" "${SMPKCNFGFILE}" 
sed "s/PUT_SIZE_ENC_SMPK_SIGNED_AES/$((${#ENC_SMPK_SIGNED_AES_KEY}/2))/" -i "${SMPKCNFGFILE}"

if [ "$dual_cert_check" -eq 2 ]; then
	ENC_BMPK_SIGNED_AES_KEY=$(xxd -p -c 1000000 tmpdir/enc_bmpk_signed_aes_key.enc)
	sed -i "s/PUT_ENC_BMPK_SIGNED_AES_KEY/${ENC_BMPK_SIGNED_AES_KEY}/" "${SMPKCNFGFILE}" 
	sed "s/PUT_SIZE_ENC_BMPK_SIGNED_AES/$((${#ENC_BMPK_SIGNED_AES_KEY}/2))/" -i "${SMPKCNFGFILE}"
fi

AESENC_SMPKH=$(xxd -p -c 1000000 tmpdir/aesenc_smpkh.enc)
AESENC_IV_SMPKH=$(xxd -p -c 1000000 tmpdir/smpkh.iv)
AESENC_RS_SMPKH=$(xxd -p -c 1000000 tmpdir/smpkh.rs)
sed -i "s/PUT_AESENC_SMPKH/${AESENC_SMPKH}/" "${SMPKCNFGFILE}" 
sed -i "s/PUT_IV_AESENC_SMPKH/${AESENC_IV_SMPKH}/" "${SMPKCNFGFILE}" 
sed -i "s/PUT_RS_AESENC_SMPKH/${AESENC_RS_SMPKH}/" "${SMPKCNFGFILE}" 
sed "s/PUT_SIZE_AESENC_SMPKH/$((${#AESENC_SMPKH}/2))/" -i "${SMPKCNFGFILE}"

if [ "$dual_cert_check" -eq 2 ]; then
	AESENC_BMPKH=$(xxd -p -c 1000000 tmpdir/aesenc_bmpkh.enc)
	AESENC_IV_BMPKH=$(xxd -p -c 1000000 tmpdir/bmpkh.iv)
	AESENC_RS_BMPKH=$(xxd -p -c 1000000 tmpdir/bmpkh.rs)
	sed -i "s/PUT_AESENC_BMPKH/${AESENC_BMPKH}/" "${SMPKCNFGFILE}" 
	sed -i "s/PUT_IV_AESENC_BMPKH/${AESENC_IV_BMPKH}/" "${SMPKCNFGFILE}" 
	sed -i "s/PUT_RS_AESENC_BMPKH/${AESENC_RS_BMPKH}/" "${SMPKCNFGFILE}" 
	sed "s/PUT_SIZE_AESENC_BMPKH/$((${#AESENC_BMPKH}/2))/" -i "${SMPKCNFGFILE}"
else
	sed -i "/.*[bB][mM].[kK].*/d" "${SMPKCNFGFILE}"
fi

AESENC_SMEK=$(xxd -p -c 1000000 tmpdir/aesenc_smek.enc)
AESENC_IV_SMEK=$(xxd -p -c 1000000 tmpdir/smek.iv)
AESENC_RS_SMEK=$(xxd -p -c 1000000 tmpdir/smek.rs)
sed -i "s/PUT_AESENC_SMEK/${AESENC_SMEK}/" "${SMPKCNFGFILE}" 
sed -i "s/PUT_IV_AESENC_SMEK/${AESENC_IV_SMEK}/" "${SMPKCNFGFILE}" 
sed -i "s/PUT_RS_AESENC_SMEK/${AESENC_RS_SMEK}/" "${SMPKCNFGFILE}" 
sed "s/PUT_SIZE_AESENC_SMEK/$((${#AESENC_SMEK}/2))/" -i "${SMPKCNFGFILE}"

if [ "$dual_cert_check" -eq 2 ]; then
	AESENC_BMEK=$(xxd -p -c 1000000 tmpdir/aesenc_bmek.enc)
	AESENC_IV_BMEK=$(xxd -p -c 1000000 tmpdir/bmek.iv)
	AESENC_RS_BMEK=$(xxd -p -c 1000000 tmpdir/bmek.rs)
	sed -i "s/PUT_AESENC_BMEK/${AESENC_BMEK}/" "${SMPKCNFGFILE}" 
	sed -i "s/PUT_IV_AESENC_BMEK/${AESENC_IV_BMEK}/" "${SMPKCNFGFILE}" 
	sed -i "s/PUT_RS_AESENC_BMEK/${AESENC_RS_BMEK}/" "${SMPKCNFGFILE}" 
	sed "s/PUT_SIZE_AESENC_BMEK/$((${#AESENC_BMEK}/2))/" -i "${SMPKCNFGFILE}"
else
	sed -i "/.*[bB][mM].[kK].*/d" "${SMPKCNFGFILE}"
fi

# create x509 certificate, signed with SMPK
openssl req -new -x509 -key "${SMPKFILE}" \
		-nodes -outform der -out "${CERTFILESMPK}" \
		-config "${SMPKCNFGFILE}" \
		-sha512

if [ "$dual_cert_check" -eq 2 ]; then
	# create x509 certificate, dual signed with BMPK
	SHAVAL=$(openssl dgst -sha512 -hex "${CERTFILESMPK}" | sed -e "s/^.*= //g")
	SHALEN=$(wc -c < "${CERTFILESMPK}")
	sed "s/SEC_CERT_SHA512/${SHAVAL}/" templates/config_bmpk_template.txt > "${BMPKCNFGFILE}"
	sed -i "s/SEC_CERT_LENGTH/${SHALEN}/" "${BMPKCNFGFILE}"
	openssl req -new -x509 -key "${BMPKFILE}" \
		-nodes -outform der -out "${CERTFILEBMPK}" \
		-config "${BMPKCNFGFILE}" \
		-sha512
fi

if [ "$dual_cert_check" -eq 2 ]; then
	# Concatenate the 2 certificates 
	cat "${CERTFILEBMPK}" "${CERTFILESMPK}" > "${CERTFILE}"
	du -b "${CERTFILEBMPK}" "${CERTFILESMPK}" "${CERTFILE}"
else
	cat "${CERTFILESMPK}" > "${CERTFILE}"
	du -b "${CERTFILESMPK}" "${CERTFILE}"
fi

rm -rf tmpdir
echo "# SHA512 Hashes of keys are stored in ${CSVFILE} for reference.."
