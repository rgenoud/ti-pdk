/*
 *  Copyright (C) 2020 Texas Instruments Incorporated
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* linker options */
--retain="*(.irqStack)"
--retain="*(.fiqStack)"
--retain="*(.abortStack)"
--retain="*(.undStack)"
--retain="*(.svcStack)"
--fill_value=0
--stack_size=0x2000
--heap_size=0x1000

-e __VECS_ENTRY_POINT
--retain="*(.utilsCopyVecsToAtcm)"

/* Stack Sizes for various modes */
__IRQ_STACK_SIZE = 0x100;
__FIQ_STACK_SIZE = 0x100;
__ABORT_STACK_SIZE = 0x100;
__UND_STACK_SIZE = 0x100;
__SVC_STACK_SIZE = 0x100;


MEMORY
{
    /* Bottom 256 KB used by SBL */
    RESET_VECTORS(X)    : ORIGIN = 0x41c80000 , LENGTH = 0x100
    R5F_TCMB0(RWIX)     : ORIGIN = 0x41010000 , LENGTH = 0x00008000
    OCMC_RAM (RWIX)     : ORIGIN = 0x41C80100 , LENGTH = 0x80000 - 0x100
}

SECTIONS
{
    .vecs       : {
        __VECS_ENTRY_POINT = .;
    } palign(8) > RESET_VECTORS
    .text_boot {
        *boot.aer5f*<*boot.o*>(.text)
     }  palign(8)   > R5F_TCMB0
    .text:xdc_runtime_Startup_reset__I     : {} palign(8) > R5F_TCMB0
    .text:ti_sysbios_family_arm_v7r_Cache* : {} palign(8) > R5F_TCMB0
    .text:ti_sysbios_family_arm_MPU*       : {} palign(8) > R5F_TCMB0
    .utilsCopyVecsToAtcm                   : {} palign(8) > R5F_TCMB0

    .text           : {} palign(8)   > OCMC_RAM
    .cinit          : {} palign(8)   > OCMC_RAM
    .bss            : {} align(8)    > OCMC_RAM
    .far            : {} align(8)    > OCMC_RAM
    .const          : {} palign(8)   > OCMC_RAM
    .data           : {} palign(128) > OCMC_RAM
    .sysmem         : {} align(8)    > OCMC_RAM
    .stack          : {} align(4)    > OCMC_RAM
    .data_buffer    : {} palign(128) > OCMC_RAM
    .boardcfg_data  : {} palign(8)   > OCMC_RAM
    .const*         : {} palign(4)   > OCMC_RAM
    .bss*           : {} align(4)    > OCMC_RAM
    .data_user      : {} palign(8)   > OCMC_RAM

    .irqStack       : {. = . + __IRQ_STACK_SIZE;} align(4)    > OCMC_RAM  (HIGH)
                        RUN_START(__IRQ_STACK_START)
                        RUN_END(__IRQ_STACK_END)
    .fiqStack       : {. = . + __FIQ_STACK_SIZE;} align(4)    > OCMC_RAM  (HIGH)
                        RUN_START(__FIQ_STACK_START)
                        RUN_END(__FIQ_STACK_END)
    .abortStack     : {. = . + __ABORT_STACK_SIZE;} align(4)  > OCMC_RAM  (HIGH)
                        RUN_START(__ABORT_STACK_START)
                        RUN_END(__ABORT_STACK_END)
    .undStack       : {. = . + __UND_STACK_SIZE;} align(4)    > OCMC_RAM  (HIGH)
                        RUN_START(__UND_STACK_START)
                        RUN_END(__UND_STACK_END)
    .svcStac        : {. = . + __SVC_STACK_SIZE;} align(4)    > OCMC_RAM  (HIGH)
                        RUN_START(__SVC_STACK_START)
                        RUN_END(__SVC_STACK_END)
    
}
