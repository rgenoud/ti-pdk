/*
 *  Copyright (c) Texas Instruments Incorporated 2021
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


/**
 *   \file  drv/gpadc/gpadc_cfg.h
 *
 *   \brief
 *      This is the header file for the GPADC driver which exposes the
 *      data structures which can be used by the applications to use the GPADC driver.
 *
 */

/****************************************************************************************
 * FILE INCLUSION PROTECTION
 ****************************************************************************************
 */
 #ifndef DRV_GPADC_CFG_H
 #define DRV_GPADC_CFG_H

/****************************************************************************************
 * INCLUDE FILES
 ****************************************************************************************
 */
#ifdef __cplusplus
extern "C" {
#endif
/****************************************************************************************
 * MACRO DEFINITIONS
 ****************************************************************************************
 */

/**
\defgroup GPADC_DRIVER_EXTERNAL_DATA_STRUCTURE      GPADC Driver External Data Structures
\ingroup DRV_GPADC_MODULE
\brief
*   The section has a list of all the data structures which are exposed to the application
*/
/**
\defgroup GPADC_DRIVER_ERROR_CODE                   GPADC Driver Error Codes
\ingroup DRV_GPADC_MODULE
\brief
*   The section has a list of all the error codes which are generated by the GPADC Driver
*   module
*/

/******************************************************************************
 * TYPE-DEFINE STRUCT/ENUM/UNION DEFINITIONS
 ******************************************************************************
 */

/** \addtogroup GPADC_DRIVER_ERROR_CODE
 *  Base error code for the GPADC module
 @{ */

/**
 * \brief
 *  GPADC STD Return Type
 *
 * \details
 *  Enumeration which describes the standard error types which are available
 */
typedef enum
{
    /**
     * \brief   Function failed to execute
     */
	E_NOT_OK = 0,

    /**
     * \brief   Function executed successfully
     */
	E_OK
}GPADC_StdReturnType;

/**
 * \brief
 *  GPADC Conversion Result
 *
 * \details
 *  Enumeration which describes the error types of GPADC conversion
 */
typedef enum
{
    /**
     * \brief   GPADC conversion error
     */
	GPADC_CONV_ERROR = 0,
    /**
     * \brief   GPADC conversion done
     */
	GPADC_CONV_DONE,
    /**
     * \brief   GPADC requested channel through the channel bitmap or
     *  index is not configured during the initialization
     */
	GPADC_CONV_CHANNEL_CONFIG_MISSING
}GPADC_ConvResultType;

/**
@}
*/

/** \addtogroup GPADC_DRIVER_EXTERNAL_DATA_STRUCTURE
 *  Exposed Data Structures to be used by the GPADC application
 @{ */

/**
 * \brief
 *  GPADC Channels/ External Source List
 *
 * \details
 *  Enumeration which describes the external sources available for GPADC conversion
 */
typedef enum
{
    /**
     * \brief   0x0 - Channel 1
     */
	GPADC_MEAS_EXT_CH1 = 0,
    /**
     * \brief   0x1 - Channel 2
     */
	GPADC_MEAS_EXT_CH2,
    /**
     * \brief   0x2 - Channel 3
     */
	GPADC_MEAS_EXT_CH3,
    /**
     * \brief   0x3 - Channel 4
     */
	GPADC_MEAS_EXT_CH4,
    /**
     * \brief   0x4 - Channel 5
     */
	GPADC_MEAS_EXT_CH5,
    /**
     * \brief   0x5 - Channel 6
     */
	GPADC_MEAS_EXT_CH6,
    /**
     * \brief   0x6 - Channel 7
     */
	GPADC_MEAS_EXT_CH7,
    /**
     * \brief   0x7 - Channel 8
     */
	GPADC_MEAS_EXT_CH8,
    /**
     * \brief   0x8 - Channel 9
     */
	GPADC_MEAS_EXT_CH9,
    /**
     * \brief   0x9 - MAX_CHANNELS
     */
	MAX_GPADC_MEAS_SOURCES
}GPADC_MeasExtSrcType;

/**
 *  \brief
 *  Trigger type for configuring the trigger source for GPADC all sources.
 *
 * \details
 *  Enumeration which describes the trigger sources for GPADC CTM mode conversion.
 *
 *  Note: Only GPADC_TRIGG_SRC_SW is supported in the TPR12 GPADC Driver.
 */
typedef enum
{
    /**
     * \brief   Conversion is triggered by a software API call
     */
    GPADC_TRIGG_SRC_SW = 0,
    /**
     * \brief   Conversion is triggered by a hardware event
     */
    GPADC_TRIGG_SRC_HW
}GPADC_TriggerSourceType;

/**
 * \brief
 *  GPADC CTM trigger source
 *
 * \details
 *  Enumeration which describes the trigger sources for GPADC CTM mode conversion
 *
 *  Note: Only GPADC_TRIGG_SRC_SW is supported in the TPR12 GPADC Driver.
 *        GPADC_TRIG_SRC_MMR_Based_SW_Trigger will be default trigger if CTM mode is configured
 */
typedef enum
{
    /**
     * \brief  0x00 - GPIO_0
     */
	GPADC_TRIG_SRC_GPIO_0 = 0,
    /**
     * \brief  0x01 - GPIO_1
     */
	GPADC_TRIG_SRC_GPIO_1,
    /**
     * \brief  0x02 - GPIO_2
     */
	GPADC_TRIG_SRC_GPIO_2,
    /**
     * \brief  0x03 - GPIO_3
     */
	GPADC_TRIG_SRC_GPIO_3,
    /**
     * \brief  0x04 - RSS_CSI2A_EOL_INT
     */
	GPADC_TRIG_SRC_RSS_CSI2A_EOL_INT,
    /**
     * \brief  0x05 - RSS_CSI2A_SOF_INT0
     */
	GPADC_TRIG_SRC_RSS_CSI2A_SOF_INT0,
    /**
     * \brief  0x06 - RSS_CSI2A_SOF_INT1
     */
	GPADC_TRIG_SRC_RSS_CSI2A_SOF_INT1,
    /**
     * \brief  0x07 - RSS_CSI2A_SOF_INT
     */
	GPADC_TRIG_SRC_RSS_CSI2A_SOF_INT,
    /**
     * \brief  0x08 - RSS_CSI2B_SOF_INT
     */
	GPADC_TRIG_SRC_RSS_CSI2B_SOF_INT,
    /**
     * \brief  0x09 - HW_Sync_FE1
     */
	GPADC_TRIG_SRC_HW_Sync_FE1,
    /**
     * \brief  0x0A - HW_Sync_FE2
     */
	GPADC_TRIG_SRC_HW_Sync_FE2,
    /**
     * \brief  0x0B - DSS_RTIA_1
     */
	GPADC_TRIG_SRC_DSS_RTIA_1,
    /**
     * \brief  0x0C - DSS_RTIB_1
     */
	GPADC_TRIG_SRC_DSS_RTIB_1,
    /**
     * \brief  0x0D - MSS_RTIA_INT1
     */
	GPADC_TRIG_SRC_MSS_RTIA_INT1,
    /**
     * \brief  0x0E - MSS_RTIB_INT1
     */
	GPADC_TRIG_SRC_MSS_RTIB_INT1,
    /**
     * \brief  0x0F - MMR_Based_SW_Trigger
     */
	GPADC_TRIG_SRC_MMR_Based_SW_Trigger
}GPADC_CtmTrigSrcType;

/**
 *  \brief
 *  GPADC Conversion Mode
 *
 * \details
 *  Enumeration which lists the conversion modes supported for TPR12 GPADC conversion
 *
 *  Note: Only GPADC_ONESHOT_CONV_MODE is supported in the TPR12 GPADC Driver.
 */
typedef enum
{
    /**
     * \brief
     *     0x00 - IFM - Inter Frame Monitoring/ One Shot Conversion Mode
     */
    GPADC_ONESHOT_CONV_MODE = 0,

    /**
     * \brief
     *     0x01 - CTM - Continuous Time Monitoring/ Continuous conversion Mode
     */
	GPADC_CONTINUOUS_CONV_MODE
}GPADC_ChannelConvModeType;

/**
 *  \brief
 *  GPADC Status Type
 *
 * \details
 *  Current status of the conversion of the requested GPADC HW unit.
 *
 */
typedef enum
{
    /**
     * \brief
     *     The conversion of the specified group has not been started.
     *     No result is available
     */
    GPADC_IDLE,

    /**
     * \brief
     *     The conversion of the specified group has been started and is still
     *     going on. So far no result is available.
     */
    GPADC_BUSY,

    /**
     * \brief
     *     A conversion round of the specified group has been finished.
     *     A result is available for all specified channels of the group.
     */
    GPADC_COMPLETED

}GPADC_StatusType;

/**
 * \brief
 *     GPADC Config Type data structure for the mode, trigger source and channel
 *     configuration for all the available external sources <0-8>
 *
 * \details
 *      Structure containing parameters for GPADC channels configuration.
 *      In term of GPADC hardware, this represents the conversion configuration
 *      for the unit and muxing, sampling parameters for each channel.
 *
 */
typedef struct
{
    /**
     * \brief   Channel number
     *   The hardware channel number from which input is given
     *   Valid values: 0x00 to MAX_GPADC_MEAS_SOURCES
     *   0x0 = Channel 1,
     *   0x1 = Channel 2,
     *   0x2 = Channel 3,
     *   0x3 = Channel 4,
     *   0x4 = Channel 5,
     *   0x5 = Channel 6,
     *   0x6 = Channel 7,
     *   0x7 = Channel 8,
     *   0x8 = Channel 9
     */
	GPADC_MeasExtSrcType  channelID;
    /**
     * \brief
     *   GPADC driver considers channels configuration passed to the
     *   driver by the application only if this flag is set
     *   TRUE: Channel Configured for channelID,
     *   FALSE: Channel is not configured
     */
    bool     isConfigured;
    /**
     * \brief
     *   TRUE: Buffered mode FALSE: Unbuffered/ Full Scale mode
     */
    bool     isBufferedMode;
    /**
     * \brief
     *   Number of samples to be skipped before collecting samples per
     *   input channel
     */
    uint32_t skipSamples;
    /**
     * \brief
     *   Number of samples to be collected for conversion per each input channel
     */
    uint8_t  collectSamples;
    /**
     * \brief
     *   TRUE: Use predefined lookup table to load number of skipSamples and collectSamples
     *    configuration for the specific input channel.
     *
     *   FALSE: Use skipSamples and collectSamples configuration from the data
     *   structure passed by the application for each configured channel
     */
    bool     useLuTable;
}GPADC_ChannelConfigType;

/**
 * \brief
 *     GPADC Config Type data structure for the mode, trigger source and channel
 *     configuration for all the available external sources <0-8>
 *
 * \details
 *      Structure containing parameters for GPADC channels configuration.
 *      In term of GPADC hardware, this represents the conversion configuration
 *      for the unit and muxing, sampling parameters for each channel.
 *
 */
typedef struct
{
    /**
     * \brief
     *   Conversion mode of the GPADC driver
     */
	GPADC_ChannelConvModeType        convMode;
    /**
     * \brief
     *   Conversion trigger SW/HW trigger selection
     */
	GPADC_TriggerSourceType          triggSrc;

    /**
     * \brief
     *   Channel configuration for all channels <0-8>
     */
	GPADC_ChannelConfigType   channelConfig[MAX_GPADC_MEAS_SOURCES];
}GPADC_ConfigType;

/**
 * \union GPADC_channelsGroupSelectType
 *
 * \brief
 *     GPADC_channels group selection for conversion together
 *
 * \details
 *      Available <0-8> external sources/channels could be selected by using bitmap
 *      of 9 bits in LSB. Ex: 0x01F is the bitmap for conversion of <0-4> external sources
 *
 *  NOTE: All channels selected in the group bitmap must have channel configuration
 *  available during GPADC initialization for successful conversion without errors.
 */
typedef union
{
    struct
    {
        /**
         * \brief
         *   Channel selection bitmap for triggering group GPADC conversion and
         *   getting results for the specified channels of the group
         */
        uint16_t b9_ChannelSelectionBitMap             : 9;    /*  bits  8:  0  */
        /**
         * \brief
         *   Reserved
         */
        uint16_t b7_Reserved                           : 7;    /*  bits  15: 9  */
    } bits;
    uint16_t b16_Val;
}GPADC_channelsGroupSelectType;

/**
@}
*/

#ifdef __cplusplus
}
#endif

#endif
/*
 * END OF DRV_GPADC_CFG_H
 */
