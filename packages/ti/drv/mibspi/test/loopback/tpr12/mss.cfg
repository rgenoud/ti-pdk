/*
 *  Copyright 2016 by Texas Instruments Incorporated.
 *
 *  All rights reserved. Property of Texas Instruments Incorporated.
 *  Restricted rights to use, duplicate or disclose this code are
 *  granted through contract.
 *
 */
/* environment['xdc.cfg.check.fatal'] = 'false'; */

/********************************************************************
 ************************** BIOS Modules ****************************
 ********************************************************************/
var Memory    = xdc.useModule('xdc.runtime.Memory');
var BIOS      = xdc.useModule('ti.sysbios.BIOS');
var HeapMem   = xdc.useModule('ti.sysbios.heaps.HeapMem');
var HeapBuf   = xdc.useModule('ti.sysbios.heaps.HeapBuf');
var Task      = xdc.useModule('ti.sysbios.knl.Task');
var Idle      = xdc.useModule('ti.sysbios.knl.Idle');
var SEM       = xdc.useModule('ti.sysbios.knl.Semaphore');
var Event     = xdc.useModule('ti.sysbios.knl.Event');
var Hwi = xdc.useModule('ti.sysbios.family.arm.v7r.keystone3.Hwi');
var System    = xdc.useModule('xdc.runtime.System');
var SysMin    = xdc.useModule('xdc.runtime.SysMin');
var SysStd    = xdc.useModule('xdc.runtime.SysStd');
var Diags     = xdc.useModule('xdc.runtime.Diags');
var Pmu       = xdc.useModule('ti.sysbios.family.arm.v7a.Pmu');
var Timestamp = xdc.useModule('xdc.runtime.Timestamp');

/* Enable extended format for System_printf() */
System.extendedFormats = '%$L%$S%$F%f';

/*
 * Create and install logger for the whole system
 */
 /*
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 4;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;
//Defaults.common$.diags_USER1 = Diags.ALWAYS_ON;
//Task.common$.diags_USER1 = Diags.ALWAYS_ON;
*/

/*
 * Build a custom BIOS library.  The custom library will be smaller than the
 * pre-built "instrumented" (default) and "non-instrumented" libraries.
 *
 * The BIOS.logsEnabled parameter specifies whether the Logging is enabled
 * within BIOS for this custom build.  These logs are used by the RTA and
 * UIA analysis tools.
 *
 * The BIOS.assertsEnabled parameter specifies whether BIOS code will
 * include Assert() checks.  Setting this parameter to 'false' will generate
 * smaller and faster code, but having asserts enabled is recommended for
 * early development as the Assert() checks will catch lots of programming
 * errors (invalid parameters, etc.)
 */
BIOS.logsEnabled = true;
BIOS.assertsEnabled = true;


/*
 * Initialize MPU and enable it
 *
 * Note: MPU must be enabled and properly configured for caching to work.
 */
xdc.loadCapsule("r5_mpu.xs");

/* Enable cache */
var Cache = xdc.useModule('ti.sysbios.family.arm.v7r.Cache');
Cache.enableCache = true;

SysMin.bufSize = 16 * 1024;
SysMin.flushAtExit = false;
System.SupportProxy = SysMin;

/* FIQ Stack Usage: */
Hwi.fiqStackSize                = 2048;
Hwi.fiqStackSection            = ".myFiqStack"

/* Sysbios supports workaround for Silicon issue https://jira.itg.ti.com/browse/K3_OPEN_SI-148
 * Details of silicon issue : https://confluence.itg.ti.com/display/PROCIPDEV/%2310+The+same+interrupt+cannot+be+nested+back-2-back+within+another+interrupt
 * Sysbios Requirement Details: https://jira.itg.ti.com/browse/SYSBIOS-1419
 * Workaround requires use of a resevred dummyIRQ.
 * Using DummyIRQ#255 as per cslr_intr_mss.h it is a reserved interrupt not connected to any
 * peripheral interrupt sources
 */
Hwi.dummyIRQ                   = 255;

Program.sectMap[".myFiqStack"] = "TCMB_RAM";

/* Default Heap Creation: Local L2 memory */
var heapMemParams           = new HeapMem.Params();
heapMemParams.size          = 32*1024;
Program.global.heap0        = HeapMem.create(heapMemParams);
Memory.defaultHeapInstance  = Program.global.heap0;

/* Enable Timer */
var Timer = xdc.useModule('ti.sysbios.timers.rti.Timer');

/*
 * for (var i=0; i < Timer.numTimerDevices; i++) {
 *   Timer.intFreqs[i].lo = 200000000;
 *   Timer.intFreqs[i].hi = 0;
 *}
*/

/* Remove clock while we are profiling for cycles and don't want BIOS
   periodic interruption. */
BIOS.clockEnabled = true;

/* Enable BIOS Task Scheduler */
BIOS.taskEnabled		= true;

Program.sectMap[".vecs"]	= "VECTORS";

/* Make sure libraries are built with 32-bit enum types to be compatible with DSP enum types*/
BIOS.includeXdcRuntime  = true;
BIOS.libType            = BIOS.LibType_Custom;
BIOS.customCCOpts      += " --enum_type=int ";
/*
 * BIOS.cpuFreq.lo = 400000000;
 * BIOS.cpuFreq.hi = 0;
 */
